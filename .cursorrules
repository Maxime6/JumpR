You are an expert iOS developer using Swift and SwiftUI. Follow these guidelines:

# Code Structure

- Leverage Swift's latest features and emphasize protocol-oriented programming.
- Prefer value types (structs) over reference types (classes) unless absolutely necessary.
- Adopt the MVVM architecture pattern for SwiftUI projects.
- Directory structure should be well-organized:
  - **Features/**: Feature-specific files and folders
  - **Core/**: Core logic and services
  - **UI/**: UI components and views
  - **Resources/**: Assets like images, colors, and fonts
- Follow Apple's Human Interface Guidelines (HIG) for design and interaction patterns.
- Strive for concise and efficient code; avoid unnecessary complexity.
- Manage colors and fonts using the asset catalog.
- Use a centralized model to define colors and fonts as variables for easy access.
- Implement delegates and protocols wherever applicable to enhance modularity and reusability.

# Networking

- Use **URLSession** for network requests.
- Separate request models and response models into distinct files to maintain clarity.
- Log all request and response data in a readable format within the network manager.
- Implement comprehensive error handling for all potential error scenarios.

# Naming Conventions

- Use **camelCase** for variables and functions; **PascalCase** for types.
- Name methods descriptively using verbs (e.g., `fetchData`, `loadImage`).
- Boolean variables should use prefixes like `is`, `has`, or `should` (e.g., `isEnabled`, `hasAccess`).
- Choose clear and descriptive names that align with Appleâ€™s conventions.
- Use **enums** for constants whenever possible (important to maintain scalability).

# Swift Best Practices

- Emphasize a strong type system and use optionals appropriately.
- Utilize **async/await** for concurrency to simplify asynchronous code.
- Use the **Result** type for error handling when appropriate.
- Leverage property wrappers like `@Published` and `@StateObject` for managing state in SwiftUI.
- Prefer `let` over `var` to enforce immutability wherever possible.
- Use protocol extensions to share reusable code across multiple types.

# UI Development

- Use **SwiftUI** as the primary framework and fallback to **UIKit** only when necessary.
- Utilize **SF Symbols** for icons to maintain a consistent design language.
- Ensure support for dark mode and dynamic type for accessibility.
- Use **SafeArea** and **GeometryReader** for responsive layouts.
- Design UI to handle all screen sizes and orientations.
- Implement proper keyboard handling for text inputs.

# Performance

- Profile the app regularly using **Instruments** to detect bottlenecks.
- Lazy load views and images to optimize memory usage.
- Optimize network requests by batching or caching data when appropriate.
- Manage background tasks efficiently to avoid performance degradation.
- Ensure proper state management to minimize unnecessary re-renders.
- Use best practices for memory management to prevent leaks.

# Data & State Management

- Use **SwiftData** for managing complex and persistent data models.
- Utilize **UserDefaults** for simple key-value storage (e.g., user preferences).
- Integrate **Combine** for reactive programming to handle data streams.
- Maintain a clean data flow architecture using unidirectional patterns.
- Apply proper dependency injection to decouple components and facilitate testing.
- Implement state restoration to ensure a seamless user experience during app restarts.

# Security

- Encrypt sensitive data at rest and in transit.
- Use the **Keychain** API securely for storing credentials.
- Implement **certificate pinning** to prevent man-in-the-middle attacks.
- Integrate biometric authentication (e.g., Face ID, Touch ID) when needed.
- Ensure **App Transport Security (ATS)** is enabled.
- Validate all user input to prevent injection attacks and other vulnerabilities.

# Testing & Quality Assurance

- Use **XCTest** for writing unit tests to validate individual components.
- Utilize **XCUITest** for end-to-end UI testing.
- Test common user flows to ensure functionality.
- Perform performance testing to identify areas for optimization.
- Simulate and handle error scenarios to improve reliability.
- Test for accessibility to ensure inclusivity and compliance.
- Create a centralized error-handling mechanism to standardize error responses.

# Essential Features

- Support **deep linking** to improve navigation and user experience.
- Implement **push notifications** for user engagement.
- Handle background tasks effectively to enhance app reliability.
- Localize the app to support multiple languages and regions.
- Implement robust error handling to provide meaningful feedback.
- Add analytics and logging to monitor app performance and usage.

# Development Process

- Use **SwiftUI Previews** extensively during development to visualize UI changes in real time.
- Adopt a clear **Git branching strategy** for version control.
- Follow a rigorous **code review process** to ensure high-quality code.
- Set up a **CI/CD pipeline** for automated builds and testing.
- Maintain thorough documentation for all major components and modules.
- Aim for comprehensive unit test coverage to prevent regressions.
- Log all requests and responses in the network manager in a readable format for debugging.

---

This refined version uses consistent language, eliminates redundancy, and adds brief clarifications for a better understanding of the rules. Let me know if you'd like to expand further or adjust anything specific!
